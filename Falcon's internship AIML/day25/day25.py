{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "64cf7540-2887-4a47-b239-35855a345544",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'matpotlib'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 5\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;66;03m# import seaborn as sns\u001b[39;00m\n\u001b[1;32m----> 5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatpotlib\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m pyplot \u001b[38;5;28;01mas\u001b[39;00m plt\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'matpotlib'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import numpy as np\n",
    "# import seaborn as sns\n",
    "from matpotlib import pyplot as plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "185612ba-4300-443d-9f07-393e4cdab05d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dell\\AppData\\Local\\Temp\\ipykernel_6552\\440397583.py:1: UserWarning: Parsing dates in %Y-%m-%d format when dayfirst=True was specified. Pass `dayfirst=False` or specify a format to silence this warning.\n",
      "  df=pd.read_csv('covid_19_india.csv' , parse_dates=['Date'] , dayfirst=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sno</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State/UnionTerritory</th>\n",
       "      <th>ConfirmedIndianNational</th>\n",
       "      <th>ConfirmedForeignNational</th>\n",
       "      <th>Cured</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Confirmed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2020-01-30</td>\n",
       "      <td>6:00 PM</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>6:00 PM</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>6:00 PM</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2020-02-02</td>\n",
       "      <td>6:00 PM</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>6:00 PM</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18105</th>\n",
       "      <td>18106</td>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>Telangana</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>638410</td>\n",
       "      <td>3831</td>\n",
       "      <td>650353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18106</th>\n",
       "      <td>18107</td>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>77811</td>\n",
       "      <td>773</td>\n",
       "      <td>80660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18107</th>\n",
       "      <td>18108</td>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>334650</td>\n",
       "      <td>7368</td>\n",
       "      <td>342462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18108</th>\n",
       "      <td>18109</td>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>1685492</td>\n",
       "      <td>22775</td>\n",
       "      <td>1708812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18109</th>\n",
       "      <td>18110</td>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>1506532</td>\n",
       "      <td>18252</td>\n",
       "      <td>1534999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18110 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Sno       Date     Time State/UnionTerritory ConfirmedIndianNational  \\\n",
       "0          1 2020-01-30  6:00 PM               Kerala                       1   \n",
       "1          2 2020-01-31  6:00 PM               Kerala                       1   \n",
       "2          3 2020-02-01  6:00 PM               Kerala                       2   \n",
       "3          4 2020-02-02  6:00 PM               Kerala                       3   \n",
       "4          5 2020-02-03  6:00 PM               Kerala                       3   \n",
       "...      ...        ...      ...                  ...                     ...   \n",
       "18105  18106 2021-08-11  8:00 AM            Telangana                       -   \n",
       "18106  18107 2021-08-11  8:00 AM              Tripura                       -   \n",
       "18107  18108 2021-08-11  8:00 AM          Uttarakhand                       -   \n",
       "18108  18109 2021-08-11  8:00 AM        Uttar Pradesh                       -   \n",
       "18109  18110 2021-08-11  8:00 AM          West Bengal                       -   \n",
       "\n",
       "      ConfirmedForeignNational    Cured  Deaths  Confirmed  \n",
       "0                            0        0       0          1  \n",
       "1                            0        0       0          1  \n",
       "2                            0        0       0          2  \n",
       "3                            0        0       0          3  \n",
       "4                            0        0       0          3  \n",
       "...                        ...      ...     ...        ...  \n",
       "18105                        -   638410    3831     650353  \n",
       "18106                        -    77811     773      80660  \n",
       "18107                        -   334650    7368     342462  \n",
       "18108                        -  1685492   22775    1708812  \n",
       "18109                        -  1506532   18252    1534999  \n",
       "\n",
       "[18110 rows x 9 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('covid_19_india.csv' , parse_dates=['Date'] , dayfirst=True)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ed76787c-dadd-4e17-bf56-4cd48543480b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  python -m notebook\n",
    "\n",
    "df=df[['Date','State/UnionTerritory','Cured','Confirmed','Deaths' ]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c6943588-a314-413f-b13c-16147b535153",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>State/UnionTerritory</th>\n",
       "      <th>Cured</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-30</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-02</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18105</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Telangana</td>\n",
       "      <td>638410</td>\n",
       "      <td>650353</td>\n",
       "      <td>3831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18106</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>77811</td>\n",
       "      <td>80660</td>\n",
       "      <td>773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18107</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>334650</td>\n",
       "      <td>342462</td>\n",
       "      <td>7368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18108</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>1685492</td>\n",
       "      <td>1708812</td>\n",
       "      <td>22775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18109</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>1506532</td>\n",
       "      <td>1534999</td>\n",
       "      <td>18252</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18110 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date State/UnionTerritory    Cured  Confirmed  Deaths\n",
       "0     2020-01-30               Kerala        0          1       0\n",
       "1     2020-01-31               Kerala        0          1       0\n",
       "2     2020-02-01               Kerala        0          2       0\n",
       "3     2020-02-02               Kerala        0          3       0\n",
       "4     2020-02-03               Kerala        0          3       0\n",
       "...          ...                  ...      ...        ...     ...\n",
       "18105 2021-08-11            Telangana   638410     650353    3831\n",
       "18106 2021-08-11              Tripura    77811      80660     773\n",
       "18107 2021-08-11          Uttarakhand   334650     342462    7368\n",
       "18108 2021-08-11        Uttar Pradesh  1685492    1708812   22775\n",
       "18109 2021-08-11          West Bengal  1506532    1534999   18252\n",
       "\n",
       "[18110 rows x 5 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data['ConfirmedIndianNational']\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1e6212a5-05a5-4871-b30a-cd01cf9d8a55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>State/UnionTerritory</th>\n",
       "      <th>Cured</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-30</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-02</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date State/UnionTerritory  Cured  Confirmed  Deaths\n",
       "0 2020-01-30               Kerala      0          1       0\n",
       "1 2020-01-31               Kerala      0          1       0\n",
       "2 2020-02-01               Kerala      0          2       0\n",
       "3 2020-02-02               Kerala      0          3       0\n",
       "4 2020-02-03               Kerala      0          3       0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f7d7b62d-521c-4fab-8af9-8a8279bf0f53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       2020-01-30\n",
       "1       2020-01-31\n",
       "2       2020-02-01\n",
       "3       2020-02-02\n",
       "4       2020-02-03\n",
       "           ...    \n",
       "18105   2021-08-11\n",
       "18106   2021-08-11\n",
       "18107   2021-08-11\n",
       "18108   2021-08-11\n",
       "18109   2021-08-11\n",
       "Name: Date, Length: 18110, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df=df[['Date','State/UnionTerritory','Cured','Confirmed','Deaths'] ]\n",
    "\n",
    "df['Date']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f4deb4a1-8718-4e36-a1da-78aff4c81eb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns=['date','state','cured','confirmed','deaths' ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "752e6c69-a11f-47b7-b9a0-9f81d35d027f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-30</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-02</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-03</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date   state  cured  confirmed  deaths\n",
       "0 2020-01-30  Kerala      0          1       0\n",
       "1 2020-01-31  Kerala      0          1       0\n",
       "2 2020-02-01  Kerala      0          2       0\n",
       "3 2020-02-02  Kerala      0          3       0\n",
       "4 2020-02-03  Kerala      0          3       0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a61543b0-3100-4fde-96a8-008af8e4839f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18105</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Telangana</td>\n",
       "      <td>638410</td>\n",
       "      <td>650353</td>\n",
       "      <td>3831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18106</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>77811</td>\n",
       "      <td>80660</td>\n",
       "      <td>773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18107</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>334650</td>\n",
       "      <td>342462</td>\n",
       "      <td>7368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18108</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>1685492</td>\n",
       "      <td>1708812</td>\n",
       "      <td>22775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18109</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>1506532</td>\n",
       "      <td>1534999</td>\n",
       "      <td>18252</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            date          state    cured  confirmed  deaths\n",
       "18105 2021-08-11      Telangana   638410     650353    3831\n",
       "18106 2021-08-11        Tripura    77811      80660     773\n",
       "18107 2021-08-11    Uttarakhand   334650     342462    7368\n",
       "18108 2021-08-11  Uttar Pradesh  1685492    1708812   22775\n",
       "18109 2021-08-11    West Bengal  1506532    1534999   18252"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5ec445c3-34f9-4b74-9700-c0c7f50413c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4179</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>133</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4180</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>19393</td>\n",
       "      <td>38044</td>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4181</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>153</td>\n",
       "      <td>543</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4182</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Assam</td>\n",
       "      <td>12888</td>\n",
       "      <td>19754</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4183</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Bihar</td>\n",
       "      <td>14018</td>\n",
       "      <td>21764</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4184</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chandigarh</td>\n",
       "      <td>476</td>\n",
       "      <td>651</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4185</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>3451</td>\n",
       "      <td>4732</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4186</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Dadra and Nagar Haveli and Daman and Diu</td>\n",
       "      <td>371</td>\n",
       "      <td>552</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4188</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Goa</td>\n",
       "      <td>1817</td>\n",
       "      <td>3108</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4190</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Haryana</td>\n",
       "      <td>18185</td>\n",
       "      <td>24002</td>\n",
       "      <td>322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4191</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Himachal Pradesh</td>\n",
       "      <td>984</td>\n",
       "      <td>1377</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4192</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jammu and Kashmir</td>\n",
       "      <td>6446</td>\n",
       "      <td>12156</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4193</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jharkhand</td>\n",
       "      <td>2513</td>\n",
       "      <td>4624</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4194</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Karnataka</td>\n",
       "      <td>19729</td>\n",
       "      <td>51422</td>\n",
       "      <td>1032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4195</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>4862</td>\n",
       "      <td>10275</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4196</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Ladakh</td>\n",
       "      <td>970</td>\n",
       "      <td>1147</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4197</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Madhya Pradesh</td>\n",
       "      <td>14127</td>\n",
       "      <td>20378</td>\n",
       "      <td>689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4199</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Manipur</td>\n",
       "      <td>1129</td>\n",
       "      <td>1764</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4200</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Meghalaya</td>\n",
       "      <td>66</td>\n",
       "      <td>377</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4201</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Mizoram</td>\n",
       "      <td>160</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4202</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Nagaland</td>\n",
       "      <td>391</td>\n",
       "      <td>916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4203</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Odisha</td>\n",
       "      <td>10877</td>\n",
       "      <td>15392</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4204</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Puducherry</td>\n",
       "      <td>947</td>\n",
       "      <td>1743</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4205</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Punjab</td>\n",
       "      <td>6277</td>\n",
       "      <td>9094</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4206</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Rajasthan</td>\n",
       "      <td>19970</td>\n",
       "      <td>27174</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4207</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Sikkim</td>\n",
       "      <td>88</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4209</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Telengana</td>\n",
       "      <td>27295</td>\n",
       "      <td>41018</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4210</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>1604</td>\n",
       "      <td>2283</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4211</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>2995</td>\n",
       "      <td>3982</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4212</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>26675</td>\n",
       "      <td>43441</td>\n",
       "      <td>1046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4213</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>21415</td>\n",
       "      <td>36117</td>\n",
       "      <td>1023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4214</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Cases being reassigned to states</td>\n",
       "      <td>0</td>\n",
       "      <td>531</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date                                     state   cured  confirmed  \\\n",
       "4179 2020-07-17               Andaman and Nicobar Islands     133        180   \n",
       "4180 2020-07-17                            Andhra Pradesh   19393      38044   \n",
       "4181 2020-07-17                         Arunachal Pradesh     153        543   \n",
       "4182 2020-07-17                                     Assam   12888      19754   \n",
       "4183 2020-07-17                                     Bihar   14018      21764   \n",
       "4184 2020-07-17                                Chandigarh     476        651   \n",
       "4185 2020-07-17                              Chhattisgarh    3451       4732   \n",
       "4186 2020-07-17  Dadra and Nagar Haveli and Daman and Diu     371        552   \n",
       "4187 2020-07-17                                     Delhi   97693     118645   \n",
       "4188 2020-07-17                                       Goa    1817       3108   \n",
       "4189 2020-07-17                                   Gujarat   32103      45481   \n",
       "4190 2020-07-17                                   Haryana   18185      24002   \n",
       "4191 2020-07-17                          Himachal Pradesh     984       1377   \n",
       "4192 2020-07-17                         Jammu and Kashmir    6446      12156   \n",
       "4193 2020-07-17                                 Jharkhand    2513       4624   \n",
       "4194 2020-07-17                                 Karnataka   19729      51422   \n",
       "4195 2020-07-17                                    Kerala    4862      10275   \n",
       "4196 2020-07-17                                    Ladakh     970       1147   \n",
       "4197 2020-07-17                            Madhya Pradesh   14127      20378   \n",
       "4198 2020-07-17                               Maharashtra  158140     284281   \n",
       "4199 2020-07-17                                   Manipur    1129       1764   \n",
       "4200 2020-07-17                                 Meghalaya      66        377   \n",
       "4201 2020-07-17                                   Mizoram     160        272   \n",
       "4202 2020-07-17                                  Nagaland     391        916   \n",
       "4203 2020-07-17                                    Odisha   10877      15392   \n",
       "4204 2020-07-17                                Puducherry     947       1743   \n",
       "4205 2020-07-17                                    Punjab    6277       9094   \n",
       "4206 2020-07-17                                 Rajasthan   19970      27174   \n",
       "4207 2020-07-17                                    Sikkim      88        243   \n",
       "4208 2020-07-17                                Tamil Nadu  107416     156369   \n",
       "4209 2020-07-17                                 Telengana   27295      41018   \n",
       "4210 2020-07-17                                   Tripura    1604       2283   \n",
       "4211 2020-07-17                               Uttarakhand    2995       3982   \n",
       "4212 2020-07-17                             Uttar Pradesh   26675      43441   \n",
       "4213 2020-07-17                               West Bengal   21415      36117   \n",
       "4214 2020-07-17          Cases being reassigned to states       0        531   \n",
       "\n",
       "      deaths  \n",
       "4179       0  \n",
       "4180     492  \n",
       "4181       3  \n",
       "4182      48  \n",
       "4183     197  \n",
       "4184      11  \n",
       "4185      21  \n",
       "4186       2  \n",
       "4187    3545  \n",
       "4188      19  \n",
       "4189    2089  \n",
       "4190     322  \n",
       "4191      11  \n",
       "4192     222  \n",
       "4193      42  \n",
       "4194    1032  \n",
       "4195      37  \n",
       "4196       1  \n",
       "4197     689  \n",
       "4198   11194  \n",
       "4199       0  \n",
       "4200       2  \n",
       "4201       0  \n",
       "4202       0  \n",
       "4203      79  \n",
       "4204      22  \n",
       "4205     230  \n",
       "4206     538  \n",
       "4207       0  \n",
       "4208    2236  \n",
       "4209     396  \n",
       "4210       3  \n",
       "4211      50  \n",
       "4212    1046  \n",
       "4213    1023  \n",
       "4214       0  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "today=df[df.date=='2020-07-17']\n",
    "today"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ac9d2336-7356-484f-9479-7682568a463c",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_confirmed_cases=case=today.sort_values(by='confirmed',ascending=False)\n",
    "\n",
    "#ascending =True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "cdf37e40-1fa0-4317-8b19-23a22f226e30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4194</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Karnataka</td>\n",
       "      <td>19729</td>\n",
       "      <td>51422</td>\n",
       "      <td>1032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4212</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>26675</td>\n",
       "      <td>43441</td>\n",
       "      <td>1046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4209</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Telengana</td>\n",
       "      <td>27295</td>\n",
       "      <td>41018</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4180</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>19393</td>\n",
       "      <td>38044</td>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4213</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>21415</td>\n",
       "      <td>36117</td>\n",
       "      <td>1023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4206</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Rajasthan</td>\n",
       "      <td>19970</td>\n",
       "      <td>27174</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4190</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Haryana</td>\n",
       "      <td>18185</td>\n",
       "      <td>24002</td>\n",
       "      <td>322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4183</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Bihar</td>\n",
       "      <td>14018</td>\n",
       "      <td>21764</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4197</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Madhya Pradesh</td>\n",
       "      <td>14127</td>\n",
       "      <td>20378</td>\n",
       "      <td>689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4182</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Assam</td>\n",
       "      <td>12888</td>\n",
       "      <td>19754</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4203</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Odisha</td>\n",
       "      <td>10877</td>\n",
       "      <td>15392</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4192</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jammu and Kashmir</td>\n",
       "      <td>6446</td>\n",
       "      <td>12156</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4195</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>4862</td>\n",
       "      <td>10275</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4205</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Punjab</td>\n",
       "      <td>6277</td>\n",
       "      <td>9094</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4185</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>3451</td>\n",
       "      <td>4732</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4193</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jharkhand</td>\n",
       "      <td>2513</td>\n",
       "      <td>4624</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4211</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>2995</td>\n",
       "      <td>3982</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4188</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Goa</td>\n",
       "      <td>1817</td>\n",
       "      <td>3108</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4210</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>1604</td>\n",
       "      <td>2283</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4199</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Manipur</td>\n",
       "      <td>1129</td>\n",
       "      <td>1764</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4204</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Puducherry</td>\n",
       "      <td>947</td>\n",
       "      <td>1743</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4191</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Himachal Pradesh</td>\n",
       "      <td>984</td>\n",
       "      <td>1377</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4196</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Ladakh</td>\n",
       "      <td>970</td>\n",
       "      <td>1147</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4202</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Nagaland</td>\n",
       "      <td>391</td>\n",
       "      <td>916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4184</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chandigarh</td>\n",
       "      <td>476</td>\n",
       "      <td>651</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4186</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Dadra and Nagar Haveli and Daman and Diu</td>\n",
       "      <td>371</td>\n",
       "      <td>552</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4181</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>153</td>\n",
       "      <td>543</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4214</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Cases being reassigned to states</td>\n",
       "      <td>0</td>\n",
       "      <td>531</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4200</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Meghalaya</td>\n",
       "      <td>66</td>\n",
       "      <td>377</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4201</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Mizoram</td>\n",
       "      <td>160</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4207</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Sikkim</td>\n",
       "      <td>88</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4179</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>133</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date                                     state   cured  confirmed  \\\n",
       "4198 2020-07-17                               Maharashtra  158140     284281   \n",
       "4208 2020-07-17                                Tamil Nadu  107416     156369   \n",
       "4187 2020-07-17                                     Delhi   97693     118645   \n",
       "4194 2020-07-17                                 Karnataka   19729      51422   \n",
       "4189 2020-07-17                                   Gujarat   32103      45481   \n",
       "4212 2020-07-17                             Uttar Pradesh   26675      43441   \n",
       "4209 2020-07-17                                 Telengana   27295      41018   \n",
       "4180 2020-07-17                            Andhra Pradesh   19393      38044   \n",
       "4213 2020-07-17                               West Bengal   21415      36117   \n",
       "4206 2020-07-17                                 Rajasthan   19970      27174   \n",
       "4190 2020-07-17                                   Haryana   18185      24002   \n",
       "4183 2020-07-17                                     Bihar   14018      21764   \n",
       "4197 2020-07-17                            Madhya Pradesh   14127      20378   \n",
       "4182 2020-07-17                                     Assam   12888      19754   \n",
       "4203 2020-07-17                                    Odisha   10877      15392   \n",
       "4192 2020-07-17                         Jammu and Kashmir    6446      12156   \n",
       "4195 2020-07-17                                    Kerala    4862      10275   \n",
       "4205 2020-07-17                                    Punjab    6277       9094   \n",
       "4185 2020-07-17                              Chhattisgarh    3451       4732   \n",
       "4193 2020-07-17                                 Jharkhand    2513       4624   \n",
       "4211 2020-07-17                               Uttarakhand    2995       3982   \n",
       "4188 2020-07-17                                       Goa    1817       3108   \n",
       "4210 2020-07-17                                   Tripura    1604       2283   \n",
       "4199 2020-07-17                                   Manipur    1129       1764   \n",
       "4204 2020-07-17                                Puducherry     947       1743   \n",
       "4191 2020-07-17                          Himachal Pradesh     984       1377   \n",
       "4196 2020-07-17                                    Ladakh     970       1147   \n",
       "4202 2020-07-17                                  Nagaland     391        916   \n",
       "4184 2020-07-17                                Chandigarh     476        651   \n",
       "4186 2020-07-17  Dadra and Nagar Haveli and Daman and Diu     371        552   \n",
       "4181 2020-07-17                         Arunachal Pradesh     153        543   \n",
       "4214 2020-07-17          Cases being reassigned to states       0        531   \n",
       "4200 2020-07-17                                 Meghalaya      66        377   \n",
       "4201 2020-07-17                                   Mizoram     160        272   \n",
       "4207 2020-07-17                                    Sikkim      88        243   \n",
       "4179 2020-07-17               Andaman and Nicobar Islands     133        180   \n",
       "\n",
       "      deaths  \n",
       "4198   11194  \n",
       "4208    2236  \n",
       "4187    3545  \n",
       "4194    1032  \n",
       "4189    2089  \n",
       "4212    1046  \n",
       "4209     396  \n",
       "4180     492  \n",
       "4213    1023  \n",
       "4206     538  \n",
       "4190     322  \n",
       "4183     197  \n",
       "4197     689  \n",
       "4182      48  \n",
       "4203      79  \n",
       "4192     222  \n",
       "4195      37  \n",
       "4205     230  \n",
       "4185      21  \n",
       "4193      42  \n",
       "4211      50  \n",
       "4188      19  \n",
       "4210       3  \n",
       "4199       0  \n",
       "4204      22  \n",
       "4191      11  \n",
       "4196       1  \n",
       "4202       0  \n",
       "4184      11  \n",
       "4186       2  \n",
       "4181       3  \n",
       "4214       0  \n",
       "4200       2  \n",
       "4201       0  \n",
       "4207       0  \n",
       "4179       0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_confirmed_cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "38330f39-e30f-4923-8744-762d4f2cb9ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_states_confirmed=max_confirmed_cases[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e55ca668-969a-4fbd-b102-857e2ea53713",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4194</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Karnataka</td>\n",
       "      <td>19729</td>\n",
       "      <td>51422</td>\n",
       "      <td>1032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date        state   cured  confirmed  deaths\n",
       "4198 2020-07-17  Maharashtra  158140     284281   11194\n",
       "4208 2020-07-17   Tamil Nadu  107416     156369    2236\n",
       "4187 2020-07-17        Delhi   97693     118645    3545\n",
       "4194 2020-07-17    Karnataka   19729      51422    1032\n",
       "4189 2020-07-17      Gujarat   32103      45481    2089"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_states_confirmed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "44beb839-7107-4100-a916-9dc6d647ca05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "b25cfe14-1645-4354-bc1b-4a88c4b8e763",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[40], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mbarplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mconfirmed\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mtop_states_confirmed , hue\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.barplot(x='state',y='confirmed', data=top_states_confirmed , hue='state')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "00c002ed-55f4-4244-b01f-ea1cabcf01bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_death_cases=today.sort_values(by='deaths', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "80b594f8-fed8-497e-8637-5a2f23416ef3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4212</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>26675</td>\n",
       "      <td>43441</td>\n",
       "      <td>1046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4194</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Karnataka</td>\n",
       "      <td>19729</td>\n",
       "      <td>51422</td>\n",
       "      <td>1032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4213</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>21415</td>\n",
       "      <td>36117</td>\n",
       "      <td>1023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4197</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Madhya Pradesh</td>\n",
       "      <td>14127</td>\n",
       "      <td>20378</td>\n",
       "      <td>689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4206</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Rajasthan</td>\n",
       "      <td>19970</td>\n",
       "      <td>27174</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4180</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>19393</td>\n",
       "      <td>38044</td>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4209</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Telengana</td>\n",
       "      <td>27295</td>\n",
       "      <td>41018</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4190</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Haryana</td>\n",
       "      <td>18185</td>\n",
       "      <td>24002</td>\n",
       "      <td>322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4205</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Punjab</td>\n",
       "      <td>6277</td>\n",
       "      <td>9094</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4192</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jammu and Kashmir</td>\n",
       "      <td>6446</td>\n",
       "      <td>12156</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4183</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Bihar</td>\n",
       "      <td>14018</td>\n",
       "      <td>21764</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4203</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Odisha</td>\n",
       "      <td>10877</td>\n",
       "      <td>15392</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4211</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>2995</td>\n",
       "      <td>3982</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4182</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Assam</td>\n",
       "      <td>12888</td>\n",
       "      <td>19754</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4193</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jharkhand</td>\n",
       "      <td>2513</td>\n",
       "      <td>4624</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4195</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>4862</td>\n",
       "      <td>10275</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4204</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Puducherry</td>\n",
       "      <td>947</td>\n",
       "      <td>1743</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4185</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>3451</td>\n",
       "      <td>4732</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4188</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Goa</td>\n",
       "      <td>1817</td>\n",
       "      <td>3108</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4191</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Himachal Pradesh</td>\n",
       "      <td>984</td>\n",
       "      <td>1377</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4184</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chandigarh</td>\n",
       "      <td>476</td>\n",
       "      <td>651</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4181</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>153</td>\n",
       "      <td>543</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4210</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>1604</td>\n",
       "      <td>2283</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4200</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Meghalaya</td>\n",
       "      <td>66</td>\n",
       "      <td>377</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4186</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Dadra and Nagar Haveli and Daman and Diu</td>\n",
       "      <td>371</td>\n",
       "      <td>552</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4196</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Ladakh</td>\n",
       "      <td>970</td>\n",
       "      <td>1147</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4179</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>133</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4207</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Sikkim</td>\n",
       "      <td>88</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4202</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Nagaland</td>\n",
       "      <td>391</td>\n",
       "      <td>916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4201</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Mizoram</td>\n",
       "      <td>160</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4199</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Manipur</td>\n",
       "      <td>1129</td>\n",
       "      <td>1764</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4214</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Cases being reassigned to states</td>\n",
       "      <td>0</td>\n",
       "      <td>531</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date                                     state   cured  confirmed  \\\n",
       "4198 2020-07-17                               Maharashtra  158140     284281   \n",
       "4187 2020-07-17                                     Delhi   97693     118645   \n",
       "4208 2020-07-17                                Tamil Nadu  107416     156369   \n",
       "4189 2020-07-17                                   Gujarat   32103      45481   \n",
       "4212 2020-07-17                             Uttar Pradesh   26675      43441   \n",
       "4194 2020-07-17                                 Karnataka   19729      51422   \n",
       "4213 2020-07-17                               West Bengal   21415      36117   \n",
       "4197 2020-07-17                            Madhya Pradesh   14127      20378   \n",
       "4206 2020-07-17                                 Rajasthan   19970      27174   \n",
       "4180 2020-07-17                            Andhra Pradesh   19393      38044   \n",
       "4209 2020-07-17                                 Telengana   27295      41018   \n",
       "4190 2020-07-17                                   Haryana   18185      24002   \n",
       "4205 2020-07-17                                    Punjab    6277       9094   \n",
       "4192 2020-07-17                         Jammu and Kashmir    6446      12156   \n",
       "4183 2020-07-17                                     Bihar   14018      21764   \n",
       "4203 2020-07-17                                    Odisha   10877      15392   \n",
       "4211 2020-07-17                               Uttarakhand    2995       3982   \n",
       "4182 2020-07-17                                     Assam   12888      19754   \n",
       "4193 2020-07-17                                 Jharkhand    2513       4624   \n",
       "4195 2020-07-17                                    Kerala    4862      10275   \n",
       "4204 2020-07-17                                Puducherry     947       1743   \n",
       "4185 2020-07-17                              Chhattisgarh    3451       4732   \n",
       "4188 2020-07-17                                       Goa    1817       3108   \n",
       "4191 2020-07-17                          Himachal Pradesh     984       1377   \n",
       "4184 2020-07-17                                Chandigarh     476        651   \n",
       "4181 2020-07-17                         Arunachal Pradesh     153        543   \n",
       "4210 2020-07-17                                   Tripura    1604       2283   \n",
       "4200 2020-07-17                                 Meghalaya      66        377   \n",
       "4186 2020-07-17  Dadra and Nagar Haveli and Daman and Diu     371        552   \n",
       "4196 2020-07-17                                    Ladakh     970       1147   \n",
       "4179 2020-07-17               Andaman and Nicobar Islands     133        180   \n",
       "4207 2020-07-17                                    Sikkim      88        243   \n",
       "4202 2020-07-17                                  Nagaland     391        916   \n",
       "4201 2020-07-17                                   Mizoram     160        272   \n",
       "4199 2020-07-17                                   Manipur    1129       1764   \n",
       "4214 2020-07-17          Cases being reassigned to states       0        531   \n",
       "\n",
       "      deaths  \n",
       "4198   11194  \n",
       "4187    3545  \n",
       "4208    2236  \n",
       "4189    2089  \n",
       "4212    1046  \n",
       "4194    1032  \n",
       "4213    1023  \n",
       "4197     689  \n",
       "4206     538  \n",
       "4180     492  \n",
       "4209     396  \n",
       "4190     322  \n",
       "4205     230  \n",
       "4192     222  \n",
       "4183     197  \n",
       "4203      79  \n",
       "4211      50  \n",
       "4182      48  \n",
       "4193      42  \n",
       "4195      37  \n",
       "4204      22  \n",
       "4185      21  \n",
       "4188      19  \n",
       "4191      11  \n",
       "4184      11  \n",
       "4181       3  \n",
       "4210       3  \n",
       "4200       2  \n",
       "4186       2  \n",
       "4196       1  \n",
       "4179       0  \n",
       "4207       0  \n",
       "4202       0  \n",
       "4201       0  \n",
       "4199       0  \n",
       "4214       0  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_death_cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "f1541631-eb3b-4234-b309-91e91a9331c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4212</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>26675</td>\n",
       "      <td>43441</td>\n",
       "      <td>1046</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date          state   cured  confirmed  deaths\n",
       "4198 2020-07-17    Maharashtra  158140     284281   11194\n",
       "4187 2020-07-17          Delhi   97693     118645    3545\n",
       "4208 2020-07-17     Tamil Nadu  107416     156369    2236\n",
       "4189 2020-07-17        Gujarat   32103      45481    2089\n",
       "4212 2020-07-17  Uttar Pradesh   26675      43441    1046"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_states_death=max_death_cases[0:5]\n",
    "\n",
    "top_states_death\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "879a84b7-8a0e-4014-9f96-1a64b516d669",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[84], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mbarplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdeaths\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mtop_states_death , hue\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABOoAAANFCAYAAADF7xNqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABx60lEQVR4nOzdeZhe8+H/4fcs2RdZZCeoVoIgSIqKLcSuSnShCRVLUKL2JWppxV6pLbUlBLVLi9RalFLUUvW1VZHEkkRIIpFIMjIzvz/yy7TTIIvEnCT3fV25rnnOOc/nfJ4x88zMy1lKqqurqwMAAAAA1KnSup4AAAAAACDUAQAAAEAhCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFEB5XU9gRVVdXZ2qquq6ngYAAAAAday0tCQlJSUL3U6oW0aqqqozZcrMup4GAAAAAHWsVasmKStbeKhz6isAAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAu74CAAAAK62qqqpUVs6t62mwHCsrK09p6dI5Fk6oAwAAAFY61dXVmT59SmbNmlHXU2EF0KhR0zRv3iolJSVfaxyhDgAAAFjpzI90TZu2TP36Db52YGHlVF1dnYqKOZkxY2qSZJVVWn+t8YQ6AAAAYKVSVVVZE+maNm1e19NhOVe/foMkyYwZU9OsWcuvdRqsm0kAAAAAK5XKysok/wks8HXN/1r6utc7FOoAAACAlZLTXVlaltbXklAHAAAAAAUg1AEAAACspKqrq7/R5/HVhDoAAACAldCYMe/k8MMPWuznvfzySznxxF8s/Qkh1AEAAACsjB599OG88srLi/28e+/9Y8aMeWcZzAihDgAAAAAKoLyuJwAAAADAsvGvf72RYcMuyRtvvJaqquqst163HHroEXnmmady3XXXJEl69eqRAw88JAcdNDCffPJJhg+/Kn/7218zefLHadSocbp33ySDBh2bDh06ZsiQM3P//aNrnnfqqWdk1133yJw5czJ8+JX5858fytSpU9K58xrZf/8B2X77Hevy5S93hDoAAACAFdDMmTNy3HFHZZNNeuTss8/P55/PzciRw3PccUfm+utvyUcfTcro0XfnyiuvS9u2bVNdXZ0TTjg6n346PYcddmRat141b731Zq655spccMGQDB16RX72s4PzySdT8+abb2TIkIvSqdNqqa6uzqmnnpD/+79/5qCDDs2aa34rTzzxWM4449RUVFRkl112r+tPxXJDqAMAAABYAY0ZMyaffDI1++zz42y4YfckyRprrJm7774rJSUladOmbZKkW7cNkiQff/xRGjVqlCOP/EU22mjjJMkmm/TI+PEf5O67RyVJOnVaLS1atEy9evVrnvfcc8/k2Wf/lrPOOqfmCLrNNtsis2fPypVXXp4+fXZOebkEtSh8lgAAAABWQN/61tpp0aJlTjrp2Gy/fZ9svvmW6dHjuzniiKO/cPtVV22TSy+9MkkyceLEfPDBexk79p28/PI/8/nnn3/pfp5//rmUlJRkiy16Ze7cuTXLt9xymzz44P0ZM+btfOc7XZbui1tBCXUAAAAAK6DGjRtn2LBrMnLk8Pz5zw/lj3+8Kw0bNsyOO+6So48+/guf89BD9+fKKy/PpEkfpnnzVfKd76yThg0bfuV+pk+flurq6uy449ZfuP7jjz8S6haRUAcAAACwgurcec388pe/TmVlZV5//dU88MB9+eMf70zHjp0W2Paf/3wpZ599Rvr2/XH23bdf2rZtlyQZNuySvPzyS1+6j6ZNm6VRo8a57LIrv3B9p06rL5XXsjIoresJAAAAALD0PfbYn7P77jtk8uSPU1ZWlm7dNszxx5+cpk2bZdKkD1NWVlZr+1de+Weqqqpy0EEDayJdZWVlnnvu2SRJVVVVkqS0tHZO6t59k8ya9Vmqq6vTtet6Nf/eeeftjBhxTSorK7+BV7ticEQdAAAAwApogw26p7KyKqeccnz69ftZmjRpkkceeSgzZ87Itttun3feeStJ8vDDD2T99TfIuuuunyQZOvT87Lbbnvn00+m5667b89Zb/06SzJ49K40bN0nTps0yZcqUPP30U/nOd7pkiy22TPfum+Tkk4/Lz352cNZYY828/vqrGT786my22eZp0aJFXX0Kljsl1dXV1XU9iRVRZWVVpkyZWdfTAAAAAP7H559XZPLkCWndukPq1atf19NZpl5//dVcc83v8sYbr2f27Nn51rfWTv/+B2abbbbLxx9/lFNOOS7//veb2X33H+T440/OqFF35NZbb8rHH3+Uli1bZZNNemSrrbbNqacenwsv/G222KJX3nnnrfzylyfngw/ez0EHHZb+/X+WWbNm5dprf5fHHnskU6dOyaqrts0OO+yYn/3s4DRo0KCuPw3L3MK+plq1apKysoWf2CrULSNCHQAAABTTyhTq+GYsrVDnGnUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAGU1/UEWDKlpSUpLS2p62nUUlVVnaqq6rqeBgAAACyxuvx729/VCHXLodLSkrRo0ThlZcU6ILKysiqffPKZNxUAAACWS3X99/aS/F29zz57ZOLECTnyyF/kJz/pt8D6Cy88J3ffPSoHHnhIDjpo4CKNt8suuy/Stt+k4cOvyv33j86dd977pdtMnDgxr7zyz+yww07f4MyWLqFuOVRaWpKystJccctT+WDStLqeTpKkU9tV8vN9t0xpaYlQBwAAwHKpLv/e/jp/V5eXl+exxx5ZINTNnTs3jz/+aEpKinVG3rIyZMgZad++g1BH3fhg0rSM/WBqXU8DAAAAVijL29/bPXp8N88++3Q+/HBi2rVrX7P8xRefT8OGjdKgQcM6nN03p7p6+T9wSKgDAAAAWI6tu+76GTdubB577M+1jqp75JGH0rt3nzz66MM1y/70p3ty5523Zty4cSktLUnXruvlqKOOTZcuXWu2mTJlcgYPPiHPPvt0GjRokJ133i1HHHF0ysrKFmmMffbZI1tvvW3+/vdnMmXKlJx99vn5zne65KqrLs/f/vZkJk/+OKus0iJbb71tjjrqmJqQePPNN+aPf7wzH300Kauu2ia77fb9HHDAQbWOCPz970fmrrtuzyeffJL11ls/J510WlZfvXOOPPLQvPTSi3nppRfzj3+8kDvvvHeJ51GXinWRMwAAAAAW23bb7ZDHHnuk5vHnn3+eJ574S3bYYceaZY8//lguuujc/OhH++Xmm+/MJZdcmTlz5uS8835Va6zRo+/ORhttkhtuuC2HHz4ot912c+6/f/RijfHHP96Vo48+PhdffFm6ddswQ4ackddeeyW//vX5ufXWP+Soo47Jfffdm7vv/kOS5Mknn8gNN4zICSeckltu+UMOO+zIjBw5PA89dH/NmBMnTsg///lSLrjgt7niiqszZcrknHfer5Mk55xzYbp12zC9e/fJNdfcsMTzqGuOqAMAAABYzvXu3Se33HJjzemvf//7M2nRokXWWec/R8qtssoqOemk07LzzrslSdq375A99vhBLrro3Fpjbb31dvnRj/ZNknTs2Cl33HFr3njj9ey++56LPMbmm2+Znj03q3ncs+dm2XDDjfOd76yTJOnQoWNGjbo9b7/97yTJ+PHvp0GD+unQoVPat2+f9u3bZ9VV29Y6lbesrCynn/7rNG3aNEmy55575+qrhyVJmjdfJeXl5WnQoEFatmy5xPOoa0IdAAAAwHKua9d107Fjp5rTXx999KEFbqrQvfsmGTt2TK6//tq8//57effdcXnrrTdTVVVVa7vOndeo9bhZs2apqJizWGOsttrqtR7vtdcP8+STT+Shh+7P+++/l3feeSvjx3+Q1VbrnCTZccdd86c/3ZOf/GSvrL32d9Kz52bZZpvt0r79f0Jd69ar1kS6efNqnjlz5nzl52Vx51HXnPoKAAAAsALo3btPHnvskcyZMyd//esTC4S6P//5wRxwwE/y/vvvZd11188RRwzKkUces8A4paUL5qL5N2pY1DEaNGhQ67knnXRMfvvbC1NaWprttts+558/NBtssFHNNi1atMh1192cYcOuzdZbb5uXX34phx9+UK677pqvnNfCLO486poj6gAAAABWAL1775Cbbro+o0ffnY4dO2WNNdastf7GG6/LHnv8IMcff0rNsr/+9fEk8yLWf9+04cssyRhvvvmvPP30U7nqquuz/vrdkiRz587NBx+8l44dOyVJHnzwvsyYMSN9+/4oG27YPQcdNDDnn392HnnkoRx44CGL9PoXNv9FmUddE+oAAAAAVgDf+U6XrLba6rn66ivSr9+BC6xv27Zd/u///pl//euNNG3aNE8++XhGjbo9SVJRUVHr6LMvsyRjtG7dOmVlZXn00YfTsmXLTJ8+LSNHjsjkyZPz+ecVSZI5c+bkiisuSZMmTbLRRhtn0qQP849/vJDu3TdZ5NffqFHjTJgwPpMmfZi2bdst0TzqmlAHAAAA8F86tV1lud1n7959MnLk8Fp3e53vmGNOzAUXDMmRRx6a+vXr5dvfXiennXZWzjjj1Lz22ivZeONNFzr+koyx6qptMnjwWRkx4qr84Q93pFWr1vne93rlxz/eL3/96+Oprq7O97+/Vz79dHquv/7aTJr0YZo1a5Ztt90+hx8+aJFf+w9+0DdDhpyRAw7YN6NHP7xE81iUowqXpZLq+ScZs1RVVlZlypSZy2Ts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59vfXifDh9+U6667Oeuuu37OPfdXmTJlcpLkppuuz80335gjjhiUESNuSpMmTfLIIw8v8byKSKgDAAAAWAF16rR6TjvtzPTqtXXat++QTTbpke222yFvv/3vWtvtvPPu2Xbb7dOp02rZc8+9M2vWZzn00COy7rrrZ5NNeuS7390s77zz9teay3rrdctPftIvI0cOz9tvv7XA+oqKigwYcGiOOGJQVltt9ay55lrp3//AVFRU5L333k11dXXuvPO2/PCHP0mfPjunc+c1c9RRx+Y731nna82raFyjDgAAAGAF1KvX1nn11VcyfPhVee+9dzNu3Ji8887badOmba3tOndeo+bjBg0aJpl3Xbn56tdvkIqKyV97PgcdNDBPPfXXDBlyZq6++vpa6zp1Wi277bZn7rrr9owd+07ee+/dvPnmv5IklZWVmTZtWiZP/jjrrrtereetv/6GGTv2na89t6JwRB0AAADACuj3vx+Zo44amKlTp2bjjTfNccedkn337b/AduXlCx7HVVq69JNR/fr1M3jwGXn77X8vcArsuHFjs+++e+fJJ59Ix46dsu++/TJ06OULjFFdXV3r8RfN/b991TXxisgRdQAAAAAroJEjR2TAgEPSr9/PapbdcssNC8Sub9K6666fffftn5Ejh6dly1bp0KFjkuQPf7gjrVq1yiWXDKvZ9sknn6j5uEWLFmnbtl1efvmf2WqrbWuWv/HGazWxrl69ekmSGTNm1Kx///33luXLWeqEOgAAAID/0nGVdivEPtu2bZfnnns2W265dcrKSvPAA/fl8ccfS6tWrZf6vhbHgAGH5sknn6h1ymrbtu0yadKHefrpp7LWWt/Kv/71en7724uSzLt+XZL06/ezXH75b7PGGmtkww03zoMP3pfXX381G2ywUZKkdetV07Fjp9x22++z+uqdM2fO7Fx66cWpX7/+N/8il5BQBwAAAJCkqqo6lVWVGbjN/nWy/8qqylRVLb2j3X75y1/l4ovPz8EH90/jxk2y/vrdcvzxp+Q3vzkvEyaMrzma7Zs2/xTYww4bULNsn31+knHjxubXvz49n3/+eVZfffUceugRGTHi6rz22ivZfPPvZe+9f5iqqsqMHDkikydPzmabbZHdd98z48aNTZKUlJTk9NN/nUsuuSgDBvw07dq1z0EHDcy1115ZJ69zSZRU1+XxjiuwysqqTJkyc5mMXV5empYtm+TUS+7L2A+mLpN9LK41O7XMOUfvmqlTZ2bu3Kq6ng4AAAB8qc8/r8jkyRPSunWH1KtX+2ir0tKSlJaW1Mm8qqqql2qo45vzVV9TSdKqVZOUlS38un+OqAMAAAD4/8Qy6pK7vgIAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABRAeV1PAAAAAKAoSktLUlpaUif7rqqqTlVVdZ3sm2IQ6gAAAAAyL9K1bNEopWVldbL/qsrKTP1k1hLFuurq6tx//+jcd9+9GTv2ncycOTNt2rTN5pt/L/vvPyCrrtpmkcYZPvyq3H//6Nx5572LPYfFMXHixLzyyj+zww47LdP9LG+EOgAAAID8/6Ppysry0u+uyozxE77RfTft2CHdDx+Y0tKSxQ51lZWVOfXU4/Pyy//M/vsPyLHHnpTGjZtkzJi3cv31w3PQQf1z3XW/T6tWrRc61r779s/ee/9oSV/GIhsy5Iy0b99BqPsfQh0AAADAf5kxfkKmjxtX19NYZLfd9vs888zfcvXVI9OlS9ea5e3bt8/GG/fIT3+6T2699aYcccTRCx2rcePGady48bKcbpJ5RwCyIDeTAAAAAFhOVVdX5667bs9OO+1aK9LN17Bhw1xxxTU5+ODDM2HC+PTq1SMvvvh8rW169eqR++6bd6rr8OFXZZ999qhZ9/LLL+UXvzgiO+20Tbbbbov07/+jPPzwAzXrhww5M6eeekKOOebn2XHHbXLjjdeluro6N998Q376032y3XZbZKedtsmJJ/4i48d/kCQ58shD89JLL+b++0fX2hdCHQAAAMBya/z4D/LhhxPTo8dmX7pN+/YdUr9+/cUe+6OPJuWYY36eb397nQwfflOuu+7mrLvu+jn33F9lypTJNds98cRj6dlzs1x77Q3ZccddcvvtN+eGG67L4YcPyi23jMq55/4m7747LpddNjRJcs45F6Zbtw3Tu3efXHPNDYv/oldgTn0FAAAAWE5NnTolSdKyZYtay0888Zj84x//OXKuXbsOufDC3y7W2BUVFRkw4NDsu2//lJbOO9arf/8Dc9999+a9996tueZds2bNs99++9c8r1On1XPaaWemV6+tk8wLhdttt0MeeeShJEnz5qukvLw8DRo0SMuWLRdrTis6oQ4AAABgObXKKi2SJNOmTau1/MQTT83s2bOTJHfeeWuefPKJxR67U6fVsttue+auu27P2LHv5L333s2bb/4rybwbWMy32mqr13per15b59VXX8nw4VflvffezbhxY/LOO2+nTZu2iz2HlY1TXwEAAACWUx07dkrr1qvmpZderLV81VXbZLXVVs9qq62eZs2af+nz586d+6Xrxo0bm3333TtPPvlEOnbslH337ZehQy9fYLsGDRrUevz734/MUUcNzNSpU7PxxpvmuONOyb779l/MV7ZyKlSoGzZsWPr3r/0f7vXXX0+/fv3SvXv3bLvtthk+fHit9VVVVbn00kuz1VZbZaONNsqAAQMy7n/uzLI0xgAAAAAomrKysuyzz09y//2j89Zb//7CbSZN+jBJUq9evSTJjBkzata9//57Xzr2H/5wR1q1apVLLhmWn/70gGyxRa9Mnjz5S7efb+TIERkw4JAcf/zJ2XPPvdOt2wZ5771xte70WlJSskivb2VTmFB3/fXX59JLL621bOrUqTnwwAOz5ppr5q677spRRx2VSy65JHfddVfNNsOGDcutt96as88+O7fddltKSkpyyCGHpKKiYqmNAQAAAFBUP/3p/tlyy61zxBEH54YbRuTf/34zEyaMz5NPPpFjjvl5/vSne7Lppj3TuvWq6dixU2677fcZM+advPHGa7nggiFfeqOJtm3bZdKkD/P0009l4sQJefzxR/Ob35yXJF/ZTNq2bZfnnns2Y8a8k3ffHZurrx6Wxx9/LJ9//nnNNo0aNc6ECeNrIiLz1Pk16j788MMMHjw4L7zwQtZaa61a626//fbUr18/Z555ZsrLy7P22mtn3Lhxueaaa9K3b99UVFRkxIgROeGEE7LNNtskSYYOHZqtttoqDz/8cHbbbbelMgYAAACw8mjascNytc/S0tL86lfn5tFH/5w//eme3HHHrfn00+lp1ap1unffJJdffnW6d98kSXL66b/OJZdclAEDfpp27drnoIMG5tprr/zCcffZ5ycZN25sfv3r0/P5559n9dVXz6GHHpERI67Oa6+9ks03/94XPu+Xv/xVLr74/Bx8cP80btwk66/fLccff0p+85vzMmHC+HTo0DE/+EHfDBlyRg44YN+MHv1wysrKlvj1r0jqPNS9+uqrWWWVVXLPPffkiiuuyAcffFCz7vnnn0/Pnj1T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vP32W7XG2muvH2attb71lft7+eWX0qfPVknmnWI7e/bstGzZKocfflSt016bNWue/fbbv+Zxp06r57TTzkyvXlvXzGG77XbII488lCR54YXnMmbMO7nttj+mU6fVkiSnnnpGDjzwpzVj3HDDiOy++/fzgx/s8//HXC0nnHBqBg06LBMmjM+MGZ+moqIi7dq1T/v2HdK+fYecf/7FqaysrPUajj762GyySY8kyYEHHpy//vUvGTv2nay3XreFfLaXnFAHAAAAsJwqLy9PVVXVF66rrq5Oefmip5+ddto1zz//91x11RV57713M3bsmLz77thsuGH3WtutttrqCx2rS5d1c8YZZydJSkpK0rhx47Rs2WqB7f53rF69ts6rr76S4cOvynvvvZtx48bknXfeTps2bZMkb7/9Vpo1a14T6ZLkO9/pkoYNG9Y8fvPNN/L666/WuvPs/OvxjR07JltssWV22GGnnHTSMWnbtl169tws3/ter2y55da15tK585o1HzdrNu+U2Dlz5iz0tX8dQh0AAADAcqp581UyY8YX36F22rRpNYFpUVx00Xl55JGHsssuu+V73+uVAw4YkFtuuSmTJn1Ya7sGDRosdKwGDRosUtD737F+//uRGT786uy66x7ZeONNs88+P8mTTz6eP//5wZptvugmGP8dJKuqqrPffvtnl112X2C7+UcPnnnmkAwYcEieeeZvee65Z3PmmYOzwQYb5dJLr6zZtrS0dIHnL8sbcCRCHQAAAMByq2vX9XLrrTdlzpw5taJXdXV1Xn75H9loo41rlpWUlNR67n8/njbtk/zxj3fmrLPOyfbb71izfOzYMcv0mmz/a+TIERkw4JD06/ezmmW33HJDTSBbZ50umTHj07zzztv51rfWTpK8++64zJgxo2b7b31r7YwbN7ZWKPzHP17I7bffkuOPPzlvv/1WHn30oQwadFw6d14zP/rRfnnoofvzq1/9MlOnTvlmXuiXEOoAAAAA/suqbRb9LqZ1vc/dd/9+brvtppx66gk54IABadu2XT76aFLuvPO2fPjhxPz4x/+5dlujRo3y8ccfZ/z4D9KxY6c0atQ4n346Pe++Oy4dO3ZK06ZN89e/Pp4uXdbNnDlzcuedt+XNN99Yptdk+19t27bLc889my233DplZaV54IH78vjjj6VVq9ZJkk026ZH11uuWs88+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PJDvfve7adCgQZLknnvuyZprrrk05wgAAAAAK7wlCnUDBw7M5Zdfni222CLvvfdeDjzwwCTJD3/4w9xzzz056KCDluokAQAAAGBFV74kT9p1113Trl27vPDCC/nud7+b7t27J0l69OiRQYMGZauttlqacwQAAACAFd4Shbok2XTTTbPpppvWWnbSSSd97QkBAAAAwMpoiUPd448/nmeeeSbTp09PVVVVrXUlJSU555xzvvbk/tsf//jHXH311XnvvffSuXPnHHnkkdlll12SJK+//nqGDBmSV155JS1atEj//v1rnX5bVVWVyy+/PHfccUemT5+eTTfdNGeccUbWWGONmm0WNgYAAAAALEtLFOpGjBiRCy64IPXq1cuqq66akpKSWuv/9/HXdffdd+fUU0/NSSedlG233TajR4/Osccem/bt22fNNdfMgQcemB122CFnnXVWXnrppZx11llp0aJF+vbtmyQZNmxYbr311px77rlp165dLrzwwhxyyCEZPXp06tevn6lTpy50DAAAAABYlpYo1N14443Zeeedc+6556ZRo0ZLe061VFdX55JLLskBBxyQAw44IEny85//PC+++GL+/ve/5+9//3vq16+fM888M+Xl5Vl77bUzbty4XHPNNenbt28qKioyYsSInHDCCdlmm22SJEOHDs1WW22Vhx9+OLvttltuv/32rxwDAAAAAJa1Jbrr6+TJk/PjH/94mUe6JHnnnXfywQcfZI899qi1fPjw4Rk4cGCef/759OzZM+Xl/2mOm2++ecaMGZPJkyfnjTfeyMyZM7P55pvXrG/evHnWW2+9PPfcc0my0DEAAAAAYFlboiPq1ltvvYwZMyZbbLHF0p7PAsaOHZsk+eyzz3LQQQfltddey2qrrZbDDz88vXv3zsSJE7POOuvUek7btm2TJOPHj8/EiROTJB06dFhgmwkTJiTJQsdo3br1Es29vHyJOuhClZUtm3GXhiLPDQAAAKDIFjnUjR8/vubj/fffP2eddVbKy8uz6aabfuGRdR07dlwqE5wxY0aSeXeUPfLII3P88cfnwQcfzBFHHJHrrrsus2fPTv369Ws9p0GDBkmSOXPmZNasWUnyhdtMmzYtSRY6xpIoLS1Jy5ZNlui5y7PmzZf9UZYAAAAAK6JFDnW9e/eudZOI6urqnH766V9644jXX3/9688uSb169ZIkBx10UPbaa68kybrrrpvXXnst1113XRo2bJiKiopaz5kf1xo3bpyGDRsmSSoqKmo+nr/N/MC4sDGWRFVVdaZP/2yJnrswZWWlhQ1i06fPSmVl1cI3BAAAAFhJNG/eaJHOQlzkUHfOOecs9bu5Lor27dsnyQKnpn7729/OX/7yl3Tq1CmTJk2qtW7+43bt2mXu3Lk1yzp37lxrm65du9bs46vGWFJz5658waqysmqlfN0AAAAAX9cih7q999675uPx48enTZs2NUe7/bc5c+bk1VdfXTqzy7zr4TVp0iT//Oc/06NHj5rlb775Zjp37pxNNtkkt956ayorK1NWVpYkefrpp7PWWmuldevWadasWZo2bZpnn322JtRNnz49r732Wvr165ck6dmz51eOAQAAAADL2hJd+X/77bf/0lNbX3755Rx44IFfa1L/rWHDhjn44INzxRVXZPTo0Xn33Xfzu9/9Lk899VQOPPDA9O3bNzNmzMjgwYPz1ltvZdSoURk5cmQGDhyYZN616fr165eLLroojzzySN54440cc8wxad++ffr06ZMkCx0DAAAAAJa1RT6i7vzzz88nn3ySZN716YYNG5aWLVsusN3rr7+eZs2aLbUJJskRRxyRRo0aZejQofnwww+z9tpr57LLLstmm22WJLn22mszZMiQ7LXXXmnTpk1OPPHEmuvZJcmgQYMyd+7cnHbaaZk9e3Z69uyZ4cOH19xAonXr1gsdAwAAAACWpZLq6urqRdnwzjvvzLBhw5IkEyZMSOvWrRe4U2pZWVmaNWuWgw46KLvtttvSn+1ypLKyKlOmzFwmY5eXl6ZlyyY59ZL7MvaDqctkH4trzU4tc87Ru2bq1JmuUQcAAADwX1q1arJ0byaxzz77ZJ999kky7w6wV1xxRdZdd90lnyEAAAAAUGORQ91/e/TRR79y/aeffrrUT38FAAAAgBXZEoW6ioqKXH/99fn73/+ezz//PPPPnq2urs5nn32Wt956K//85z+X6kQBAAAAYEW2RKHuggsuyE033ZR11lknU6ZMSYMGDdKqVau8+eab+fzzz3PkkUcu7XkCAAAAwApt4Vex+wIPPfRQfvazn+Wee+5J//79061bt9xxxx156KGH0qlTp1RVuZkAAAAAACyOJQp1U6ZMyTbbbJMk6dKlS/7v//4vSdKuXbsceuihue+++5beDAEAAABgJbBEoa5Zs2apqKhIkqy55pqZMGFCZsyYUesxAAAAALDolijU9ejRIzfeeGM+++yzrLbaamnUqFEefvjhJMk//vGPNG3adKlOEgAAAABWdEsU6o488si89NJLGThwYMrLy7Pffvvl9NNPz957751LLrkkO+2009KeJwAAAACs0Jborq9dunTJ/fffnzfffDNJctxxx6Vp06Z58cUX07t37xx66KFLdZIAAAAAsKJbolCXJG3atEmbNm2SJCUlJTnssMOW2qQAAAAAYGWzxKFuypQpGT58eP72t7/lo48+yrXXXps///nP6dq1a3bYYYelOUcAAAAAWOEt0TXq3nvvvXz/+9/P7bffnnbt2mXy5MmprKzMmDFjMmjQoPzlL39ZytMEAAAAgBXbEh1Rd/7556d169a58cYb07hx43Tr1i1J8pvf/CZz5szJlVdemW233XZpzhMAAAAAVmhLdETd008/nSOOOCLNmzdPSUlJrXU//vGP8+9//3upTA4AAAAAVhZLFOqSpKys7AuXV1RULBDvAAAAAICvtkShrkePHrn66qvz2Wef1SwrKSlJVVVVbrnllmyyySZLbYIAAAAAsDJYomvUHXfccdl3332z4447ZrPNNktJSUmGDx+et99+O+PGjcvNN9+8tOcJAAAAACu0JTqibp111smdd96ZzTbbLM8++2zKysryt7/9LZ07d86tt96addddd2nPEwAAAABWaIt8RN348eNrPW7QoEGOO+64L922Y8eOX29mAAAAALASWeRQ17t378W6ScTrr7++RBMCAAAAgJXRIoe6c845pybUTZs2LRdddFG22GKL7LLLLmnTpk0++eSTPProo/nLX/6Sk08+eZlNGAAAAABWRIsc6vbee++aj3/+859nr732yq9//eta2+yxxx4ZMmRI7r///vz4xz9eerMEAAAAgBXcEt1M4qmnnsrOO+/8heu23Xbb/OMf//hakwIAAACAlc0ShbqWLVvmpZde+sJ1zzzzTNq1a/d15gQAAAAAK51FPvX1v/3whz/MsGHDMmvWrPTu3TutWrXKxx9/nAceeCC33HJLTj311KU9TwAAAABYoS1RqDv88MPz6aef5vrrr8/w4cOTJNXV1WnYsGGOPvro/PSnP12qkwQAAACAFd0ShbqSkpKcdNJJOeKII/LSSy9l2rRpadmy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6wCAFZZQBwBALaWlJSkrLctVj9+Q8dM+rOvpJEk6rtIuA7fZP6WlJUIdALDCEuoAAPhC46d9mHGT36/raQAArDTcTAIAAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAArAXV8BAAD42kpLS1JaWlLX06ilqqo6VVXVdT0NgEUm1AEAAPC1lJaWpGWLRiktK6vrqdRSVVmZqZ/MEuuA5UbhQ90nn3ySiy++OH/5y18yY8aMdOnSJccdd1x69OiRJHn99dczZMiQvPLKK2nRokX69++fgw46qOb5VVVVufzyy3PHHXdk+vTp2XTTTXPGGWdkjTXWqNlmYWMAAADw5UpLS1JaVpaXfndVZoyfUNfTSZI07dgh3Q8fmNLSEqEOWG4UPtQde+yxmTx5ci6++OK0atUqN998cw466KCMGjUqrVq1yoEHHpgddtghZ511Vl566aWcddZZadGiRfr27ZskGTZsWG699dace+65adeuXS688MIccsghGT16dOrXr5+pU6cudAwAAAAWbsb4CZk+blxdTwNguVXoUDdu3Lg89dRTueWWW7LJJpskSQYPHpwnnngio0ePTsOGDVO/fv2ceeaZKS8vz9prr51x48blmmuuSd++fVNRUZERI0bkhBNOyDbbbJMkGTp0aLbaaqs8/PDD2W233XL77bd/5RgAAAAA8E0o9F1fW7ZsmauvvjrdunWrWVZSUpLq6upMmzYtzz//fHr27Jny8v/0xs033zxjxozJ5MmT88Ybb2TmzJnZfPPNa9Y3b9486623Xp577rkkWegYAAAAAPBNKPQRdc2bN685Em6++++/P++++2569eqVoUOHZp111qm1vm3btkmS8ePHZ+LEiUmSDh06LLDNhAnzrpswceLErxyjdevWSzz/8vJl00HLyorbV4s8N1hZFfn7sshzg5VZkb83izw3WJkV+XuzyHMD+F+FDnX/64UXXsipp56a7bffPr179865556b+vXr19qmQYMGSZI5c+Zk1qxZSfKF20ybNi1JMnv27K8cY0mVlpakZcsmS/z85VXz5o3qegrAcsR7BrC4vG8Ai8v7BrA8WW5C3Z///Occf/zx2WijjXLxxRcnSRo2bJiKiopa282Pa40bN07Dhg2TJBUVFTUfz9+mUaNGizTGkqqqqs706Z8t8fO/SllZaWF/2EyfPiuVlVV1PQ3gv3jPABaX9w1gcXnfAPhqzZs3WqQjfJeLUHfTTTdlyJAh6dOnTy666KKaI+Dat2+fSZMm1dp2/uN27dpl7ty5Ncs6d+5ca5uuXbsu0hhfx9y5K98Pg8rKqpXydQNLxnsGsLi8bwCLy/sGsDwp/Mn6N998c37961/npz/9aX7729/WOk21Z8+eeeGFF1JZWVmz7Omnn85aa62V1q1bp2vXrmnatGmeffbZmvXTp0/Pa6+9lh49eizSGAAAAADwTSh0qBszZkzOOeec9OnTJwMHDszkyZPz0Ucf5aOPPsqnn36avn37ZsaMGRk8eHDeeuutjBo1KiNHjszAgQOTzLs2Xb9+/XLRRRflkUceyRtvvJFjjjkm7du3T58+fZJkoWMAAAAAwDeh0Ke+Pvjgg/n888/z8MMP5+GHH661bq+99sp5552Xa6+9NkOGDMlee+2VNm3a5MQTT8xee+1Vs92gQYMyd+7cnHbaaZk9e3Z69uyZ4cOH1xyZ17p164WOAQAAAADLWqFD3WGHHZbDDjvsK7fZcMMNc9ttt33p+rKyspxwwgk54YQTlngMAAAAAFjWCn3qKwAAAACsLIQ6AAAAACgAoQ4AAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAApAqAMAAACAAhDqAAAAAKAAhDoAAAAAKAChDgAAAAAKQKgDAAAAgAIQ6gAAAACgAIQ6AAAAACgAoQ4AAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAApAqAMAAACAAhDqAAAAAKAAhDoAAAAAKAChDgAAAAAKQKgDAAAAgAIQ6gAAAACgAIQ6AAAAACgAoQ4AAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAApAqAMAAACAAhDqAAAAAKAAhDoAAAAAKAChDgAAAAAKQKgDAAAAgAIQ6gAAAACgAIQ6AAAAACgAoQ4AAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAApAqAMAAACAAhDqAAAAAKAAhDoAAAAAKAChDgAAAAAKQKgDAAAAgAIQ6gAAAACgAIQ6AAAAACgAoQ4AAAAACkCoAwAAAIACEOoAAAAAoACEOgAAAAAoAKEOAAAAAAqgvK4nAAAAAMDKpbS0JKWlJXU9jQVUVVWnqqq6zvYv1AEAAADwjSktLUmLFo1TVla8Ez0rK6vyySef1VmsE+oAAAAA+MaUlpakrKw0d9/+bD7+6NO6nk6NVds0y54/2iylpSVCHQAAAAArj48/+jQfjv+krqdRKMU7xhAAAAAAVkJCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAUAcAAAAABSDUAQAAAEABCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAUAcAAAAABSDUAQAAAEABCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAUAcAAAAABSDUAQAAAEABCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAUAcAAAAABSDUAQAAAEABCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh1AAAAAFAAQh0AAAAAFIBQBwAAAAAFINQBAAAAQAEIdQAAAABQAEIdAAAAABSAUAcAAAAABSDUAQAAAEABCHUAAAAAUABC3f9XVVWVSy+9NFtttVU22mijDBgwIOPGjavraQEAAACwkhDq/r9hw4bl1ltvzdlnn53bbrstJSUlOeSQQ1JRUVHXUwMAAABgJSDUJamoqMiIESNy1FFHZZtttknXrl0zdOjQfPjhh3n44YfrenoAAAAArARKqqurq+t6EnXt5Zdfzg9/+MM88MADWWuttWqW77vvvunSpUvOPPPMxR6zuro6VVXL5lNbUpKUlpZm2ozZqaysWib7WFxlZaVZpWnDVFVVxVcUFMv894zPZ05PdVVlXU8nSVJSWpZ6TZp7z4CCmv++MX3Wp5lbkPeN8tKyNG/UzPsGFNT8940506enem4x3jdKysvSoLnfN6CI5r9nzCxQ10jmtY0my6htlJaWpKSkZKHblS/d3S6fJk6cmCTp0KFDreVt27bNhAkTlmjMkpKSlJUt/D/A17FK04bLdPwlUVrqIE0oqnpNmtf1FBbgPQOKrXmjZnU9hQV434Bia9Dc7xvAomtSwK6R1O37hnesJLNmzUqS1K9fv9byBg0aZM6cOXUxJQAAAABWMkJdkoYN5xXc/71xxJw5c9KoUaO6mBIAAAAAKxmhLv855XXSpEm1lk+aNCnt27eviykBAAAAsJIR6pJ07do1TZs2zbPPPluzbPr06XnttdfSo0ePOpwZAAAAACsLN5PIvGvT9evXLxdddFFatWqVTp065cILL0z79u3Tp0+fup4eAAAAACsBoe7/GzRoUObOnZvTTjsts2fPTs+ePTN8+PAFbjABAAAAAMtCSXV1dXVdTwIAAAAAVnauUQcAAAAABSDUAQAAAEABCHUAAAAAUABCHQAAAAAUgFAHAAAAAAUg1AEAAABAAQh11LnevXunS5cuue66675w/emnn54uXbrksssuW+TxFnXbb9Jll12W3r17f+U248ePz5/+9KdvaEZQHPPfB+b/69atW7bddtv86le/ytSpUxd5nP/9PuvSpUtGjRq1yNvD8uzkk0+u9X30Rf+WtmeffTZdunTJ+++/n2ThP4O7dOmSvffeO3Pnzl1gXf/+/XPyySd/rfmcfPLJ6d+//9caA4qquro6o0aNSv/+/bP55punW7du2WGHHfKrX/0qH3744SKP80397PN7LUXyVT9j/vd7YurUqbnjjjtqHn/22Wf5/e9/v9Tn9EU/t7t3754999yz1v6XpoX9brw4/vd3AJYeoY5CqFevXh544IEFls+dOzcPPfRQSkpK6mBW37yTTjopf/3rX+t6GlAnBgwYkCeffDJPPvlk7r///vzyl7/M3/72t+y///6ZMWPGMtvnnXfeuUzGhm/a4MGDa76HnnzyySTJqaeeusCypWnjjTfOk08+mQ4dOizyc1599dVcc801S30usCKrrKzM4YcfnvPOOy/bbbddbrzxxjz00EP55S9/mVdffTV9+/bNxx9/vEhjfVM/+/xey/LqggsuyD333FPzeMSIERk+fPgy2df8n6Pz/917773Zbrvtctppp+Whhx5aJvuk+IQ6CmGLLbbIP//5z0yYMKHW8meeeSaNGzderD8AgOVT48aN06ZNm7Rp0yarr756tt9++4wYMSLvv//+MvvlqEmTJmnVqtUyGRu+ac2aNav5HmrTps2XLlua6tevnzZt2qSsrGyRn7P66qvniiuuyL/+9a+lPh9YUV133XX561//muuuuy4DBgzId77znXTs2DHbbLNNrr/++tSrVy8jRoxYpLH87IOvVl1d/ZWPl6Z69erV+jm9+uqr5xe/+EXWXHPNWrGQlYtQRyFsuOGG6dix4wJH1d13333ZZZddah1Rd9ddd+UHP/hBNtxww3Tv3j39+/fPq6++Wut5H330UY466qh07949m222Wc4999xUVlYu8hi9e/fOOeeck1133TWbbbZZnnnmmUyfPj1nnHFGttlmm6y//vrZcsstc8YZZ2T27Nk1zxs+fHh22GGHdOvWLb17984VV1yxwBv7Nddck2222SYbbrhh+vfvn7FjxyaZdzj23//+9/zhD3+oOfR6SecBK4qOHTumT58+GT16dJLk008/zS9/+ctsvvnm2XTTTbP//vvn//7v/75yjDFjxuTAAw/MhhtumF69euWqq66qWefUV1Ym1dXVufbaa7PLLrukW7du2XTTTTNw4MC89957Ndt06dIlo0ePzv77758NN9wwffr0yaOPPppHH300O+20U7p3756DDz44U6ZMSbJkp70cfPDBWWONNXLKKad84Smw873wwgs58MADs+mmm6Zbt27Zfffda94L5r+eYcOGZeutt0737t0zePDgzJkzp2b9+++/ny5duuTZZ5+tNe7SPO0HvgnV1dX5/e9/n+9///tZf/31F1jfqFGj3HTTTfnFL36xSF/3//uzb2HfayeffHKOPPLIDBgwIJtsskmuuuqqhb6ffNHvtbA8OPnkk/OHP/whf//732suv3T55Zfngw8+qPl5V1FRkd/85jc1f/dtttlmOfbYY2su1zL/+3DYsGHZcsst07t370yfPn2x5lFWVpb69evXzGlxvweTZOLEiTn88MOz8cYbZ9ttt/3CU9Efe+yx7L333jU/83/729+moqKiZv3jjz+evffeOxtttFG22GKLnHzyyZk2bVqtMR5//PHsscce6datW3bbbbf85S9/WazXyoKEOgpjl112qRXqKioq8uc//zm77bZbzbKHH344Z5xxRn72s5/l/vvvz8iRIzN79uwMHjy41lh33nlnevTokXvvvTcnnHBCrr/++vzhD39YrDFuueWWnHbaabn22muzySab5KSTTsrLL7+cSy+9NA8++GBOOeWUjBo1KrfddluS5NFHH82VV16Zs846Kw899FCOP/74/O53v6v1f0I++OCDvPDCC7nqqqty00035aOPPqrZ72WXXZaNN944u+yyS63TERZ3HrCiWWeddfLuu+9mxowZOeSQQzJ27NhcddVVuf3229O9e/fsu+++ee211770+TfddFP23HPP/OlPf8p+++2Xiy++OE8//fQ3+AqgGEaOHJmrrroqJ5xwQh588MEMGzYsY8aMyXnnnVdru7PPPjs//elPM3r06Hz729/Occcdl9/97ne58MILc+WVV+bll1/+Wqeu1q9fP+eee27eeOONXH311V+4zYcffpgBAwaka9euGTVqVO6+++5ssMEGOeWUU2pO77v66qtz7bXX5sQTT8yoUaPStGnT3HfffUs8Lyiq999/P+PHj8/3vve9L92mU6dONX/UL45F+V5L5v3+/L3vfS933XVXvv/97y/0/eTLfq+Fohs8eHB22WWXmlNSBwwYkAEDBqR9+/Y1l3q44IILMnr06AwZMiQPPvhgzj///Dz11FP53e9+V2use+65JyNHjswll1yS5s2bL9L+Z8yYkauvvjpvv/12dt5555rli/s9OHfu3Bx88MGZOnVqbrrppgwdOnSBn91PPPFEjj766Pzwhz/M6NGjc8YZZ+T+++/PCSeckCSZMmVKjjzyyPTt2zf33XdfLr/88jz33HO54IILao1zww035LTTTsu9996bNddcM7/4xS8yc+bMxf7c8x/ldT0BmG+XXXbJ8OHDM2HChHTo0CFPPfVUWrZsmfXWW69mmxYtWuTss8/OD37wgyTzfin54Q9/mDPOOKPWWH369MkBBxyQZN4pNjfccENeeeWV7LPPPos8xjbbbFPrF6Itt9wyPXr0SNeuXZMkq622Wm666aaaU3fefffdNGjQIKuttlo6duyYjh07pm3btunYsWPNGOXl5bnwwgvTrFmzJMlPfvKTDB06tOa11atXLw0bNqx1OsLizgNWNPN/sXn00Ufzj3/8I08//XTN98ixxx6bF198MTfccMMCsWG+fffdt+b7/YgjjsiIESPyyiuvZIsttvhG5g9F0blz55x33nk1R7d06tQpu+yyywL/h32vvfbKTjvtlGTez6lHH300xxxzTDbccMMk834Ovfnmm19rLhtuuGEGDBiQYcOGZfvtt1/gRhcVFRU58sgjc9BBB6W0dN7/Vx44cGBGjRqVsWPHpnXr1rnxxhuz//77Z/fdd0+SnHLKKQscRQQrgvnB7H9PVz3ssMNqfc137Nix1lHji2Jh32urrrpqkmSVVVbJwQcfXPO8hb2ffNnvtVB0zZo1S8OGDWtOSU3mXZ6lrKys5vEGG2yQHXfcMd/97neTzPv679Wr1wJ/j+2333759re//ZX7e/7557PxxhsnmXf07KxZs9K6descf/zx2XHHHWu2W9zvwaeffjr//ve/8/DDD6dz585JknPPPbfmd+IkufLKK7PPPvtk3333rRnzrLPOygEHHJD3338/n376aSoqKtKxY8d06tQpnTp1ypVXXlnrTLVk3vVwN9tssyTJz3/+8/z5z3/O22+/XfN7A4tPqKMwunXrltVXXz0PPPBADjzwwNx33301v3zP17Nnz7Rq1SrDhg3LuHHjMmbMmLz++uupqqqqtd1aa61V6/Eqq6xSczrMoo6xxhpr1Hq833775dFHH83dd9+dd999N2+++Wbee++9rLnmmkmS73//+7nrrruy4447pkuXLtlyyy3Tp0+fWqFu1VVXrYl0ybwAsbBTVhd3HrCi+fTTT5Ok5lD+7bffvtb6ioqKWqe7/a//fT9o3rz5V24PK6revXvnn//8Zy699NKMGzcub7/9dv7973+nXbt2tbb77++Zhg0bJpn3P73ma9CgQa3TYpbUoEGD8thjj+WUU07J7bffXmvd6quvnr59++amm27KW2+9lbFjx+b1119PMu+i+lOnTs1HH32UDTbYoNbzunfvnrfffvtrzw2KpGXLlkmSTz75pNbys846q+b3yBtvvDGPPvroYo+9sO+1+f7399FFfT+BoigvL1/g7735qqqqUl6+6Glkzz33zNNPP52LL744Y8eO/X/t3X9QVNX/x/GnoKngr1khMEUclJRSTEHJRgczUyEkZjAnFQ0FQV1F1NSmqNDshz8RUTGdsBpULPuBk2A10DiN/XBERxKyBXVUzEWU1Bh+aLKfPxz2K7Eq+lXZ9PWYYRjuPffec3f2HM6+97zP5ejRoxw7dgx/f/965f7dbmzp3bs3K1asAMDBwQEnJyc6duzYoNzttkGTyUT79u2tQToAHx8fWrdubf27sLCQ/Px8a+YZ/N96fEePHiUwMJCQkBCmTZtGp06deOaZZxg6dGiDdPbrxw11X7BrWab/H6W+il2pS3+tqakhJyeH4ODg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",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.barplot(x='state',y='deaths', data=top_states_death , hue='state')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "9ce66d44-36e3-44ac-9ef9-b71466a516ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_cured_cases=today.sort_values(by='cured', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "8714d63a-3773-4fe1-bf1d-439e71bd9278",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4198</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>158140</td>\n",
       "      <td>284281</td>\n",
       "      <td>11194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4208</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tamil Nadu</td>\n",
       "      <td>107416</td>\n",
       "      <td>156369</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4187</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>97693</td>\n",
       "      <td>118645</td>\n",
       "      <td>3545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4189</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Gujarat</td>\n",
       "      <td>32103</td>\n",
       "      <td>45481</td>\n",
       "      <td>2089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4209</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Telengana</td>\n",
       "      <td>27295</td>\n",
       "      <td>41018</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4212</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttar Pradesh</td>\n",
       "      <td>26675</td>\n",
       "      <td>43441</td>\n",
       "      <td>1046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4213</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>West Bengal</td>\n",
       "      <td>21415</td>\n",
       "      <td>36117</td>\n",
       "      <td>1023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4206</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Rajasthan</td>\n",
       "      <td>19970</td>\n",
       "      <td>27174</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4194</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Karnataka</td>\n",
       "      <td>19729</td>\n",
       "      <td>51422</td>\n",
       "      <td>1032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4180</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andhra Pradesh</td>\n",
       "      <td>19393</td>\n",
       "      <td>38044</td>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4190</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Haryana</td>\n",
       "      <td>18185</td>\n",
       "      <td>24002</td>\n",
       "      <td>322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4197</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Madhya Pradesh</td>\n",
       "      <td>14127</td>\n",
       "      <td>20378</td>\n",
       "      <td>689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4183</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Bihar</td>\n",
       "      <td>14018</td>\n",
       "      <td>21764</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4182</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Assam</td>\n",
       "      <td>12888</td>\n",
       "      <td>19754</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4203</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Odisha</td>\n",
       "      <td>10877</td>\n",
       "      <td>15392</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4192</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jammu and Kashmir</td>\n",
       "      <td>6446</td>\n",
       "      <td>12156</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4205</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Punjab</td>\n",
       "      <td>6277</td>\n",
       "      <td>9094</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4195</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Kerala</td>\n",
       "      <td>4862</td>\n",
       "      <td>10275</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4185</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chhattisgarh</td>\n",
       "      <td>3451</td>\n",
       "      <td>4732</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4211</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Uttarakhand</td>\n",
       "      <td>2995</td>\n",
       "      <td>3982</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4193</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Jharkhand</td>\n",
       "      <td>2513</td>\n",
       "      <td>4624</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4188</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Goa</td>\n",
       "      <td>1817</td>\n",
       "      <td>3108</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4210</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Tripura</td>\n",
       "      <td>1604</td>\n",
       "      <td>2283</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4199</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Manipur</td>\n",
       "      <td>1129</td>\n",
       "      <td>1764</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4191</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Himachal Pradesh</td>\n",
       "      <td>984</td>\n",
       "      <td>1377</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4196</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Ladakh</td>\n",
       "      <td>970</td>\n",
       "      <td>1147</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4204</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Puducherry</td>\n",
       "      <td>947</td>\n",
       "      <td>1743</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4184</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Chandigarh</td>\n",
       "      <td>476</td>\n",
       "      <td>651</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4202</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Nagaland</td>\n",
       "      <td>391</td>\n",
       "      <td>916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4186</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Dadra and Nagar Haveli and Daman and Diu</td>\n",
       "      <td>371</td>\n",
       "      <td>552</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4201</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Mizoram</td>\n",
       "      <td>160</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4181</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Arunachal Pradesh</td>\n",
       "      <td>153</td>\n",
       "      <td>543</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4179</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Andaman and Nicobar Islands</td>\n",
       "      <td>133</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4207</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Sikkim</td>\n",
       "      <td>88</td>\n",
       "      <td>243</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4200</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Meghalaya</td>\n",
       "      <td>66</td>\n",
       "      <td>377</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4214</th>\n",
       "      <td>2020-07-17</td>\n",
       "      <td>Cases being reassigned to states</td>\n",
       "      <td>0</td>\n",
       "      <td>531</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date                                     state   cured  confirmed  \\\n",
       "4198 2020-07-17                               Maharashtra  158140     284281   \n",
       "4208 2020-07-17                                Tamil Nadu  107416     156369   \n",
       "4187 2020-07-17                                     Delhi   97693     118645   \n",
       "4189 2020-07-17                                   Gujarat   32103      45481   \n",
       "4209 2020-07-17                                 Telengana   27295      41018   \n",
       "4212 2020-07-17                             Uttar Pradesh   26675      43441   \n",
       "4213 2020-07-17                               West Bengal   21415      36117   \n",
       "4206 2020-07-17                                 Rajasthan   19970      27174   \n",
       "4194 2020-07-17                                 Karnataka   19729      51422   \n",
       "4180 2020-07-17                            Andhra Pradesh   19393      38044   \n",
       "4190 2020-07-17                                   Haryana   18185      24002   \n",
       "4197 2020-07-17                            Madhya Pradesh   14127      20378   \n",
       "4183 2020-07-17                                     Bihar   14018      21764   \n",
       "4182 2020-07-17                                     Assam   12888      19754   \n",
       "4203 2020-07-17                                    Odisha   10877      15392   \n",
       "4192 2020-07-17                         Jammu and Kashmir    6446      12156   \n",
       "4205 2020-07-17                                    Punjab    6277       9094   \n",
       "4195 2020-07-17                                    Kerala    4862      10275   \n",
       "4185 2020-07-17                              Chhattisgarh    3451       4732   \n",
       "4211 2020-07-17                               Uttarakhand    2995       3982   \n",
       "4193 2020-07-17                                 Jharkhand    2513       4624   \n",
       "4188 2020-07-17                                       Goa    1817       3108   \n",
       "4210 2020-07-17                                   Tripura    1604       2283   \n",
       "4199 2020-07-17                                   Manipur    1129       1764   \n",
       "4191 2020-07-17                          Himachal Pradesh     984       1377   \n",
       "4196 2020-07-17                                    Ladakh     970       1147   \n",
       "4204 2020-07-17                                Puducherry     947       1743   \n",
       "4184 2020-07-17                                Chandigarh     476        651   \n",
       "4202 2020-07-17                                  Nagaland     391        916   \n",
       "4186 2020-07-17  Dadra and Nagar Haveli and Daman and Diu     371        552   \n",
       "4201 2020-07-17                                   Mizoram     160        272   \n",
       "4181 2020-07-17                         Arunachal Pradesh     153        543   \n",
       "4179 2020-07-17               Andaman and Nicobar Islands     133        180   \n",
       "4207 2020-07-17                                    Sikkim      88        243   \n",
       "4200 2020-07-17                                 Meghalaya      66        377   \n",
       "4214 2020-07-17          Cases being reassigned to states       0        531   \n",
       "\n",
       "      deaths  \n",
       "4198   11194  \n",
       "4208    2236  \n",
       "4187    3545  \n",
       "4189    2089  \n",
       "4209     396  \n",
       "4212    1046  \n",
       "4213    1023  \n",
       "4206     538  \n",
       "4194    1032  \n",
       "4180     492  \n",
       "4190     322  \n",
       "4197     689  \n",
       "4183     197  \n",
       "4182      48  \n",
       "4203      79  \n",
       "4192     222  \n",
       "4205     230  \n",
       "4195      37  \n",
       "4185      21  \n",
       "4211      50  \n",
       "4193      42  \n",
       "4188      19  \n",
       "4210       3  \n",
       "4199       0  \n",
       "4191      11  \n",
       "4196       1  \n",
       "4204      22  \n",
       "4184      11  \n",
       "4202       0  \n",
       "4186       2  \n",
       "4201       0  \n",
       "4181       3  \n",
       "4179       0  \n",
       "4207       0  \n",
       "4200       2  \n",
       "4214       0  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_cured_cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "32742a2f-8cff-444d-bd76-17367bd4818b",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_states_cured=max_cured_cases[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "09821cb9-4828-4d3b-8c5c-4278b182950d",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[92], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mbarplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcured\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mtop_states_death , hue\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.barplot(x='state',y='cured', data=top_states_death , hue='state')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "89227fad-65ba-4312-8746-1faf3c20ea9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "maha=df[df.state=='Maharashtra']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "5e990152-5f09-461a-9309-1b0ab07174cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>2020-03-09</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>2020-03-10</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>2020-03-11</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>2020-03-12</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>2020-03-13</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17950</th>\n",
       "      <td>2021-08-07</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>6130137</td>\n",
       "      <td>6341759</td>\n",
       "      <td>133717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17986</th>\n",
       "      <td>2021-08-08</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>6139493</td>\n",
       "      <td>6347820</td>\n",
       "      <td>133845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18022</th>\n",
       "      <td>2021-08-09</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>6144388</td>\n",
       "      <td>6353328</td>\n",
       "      <td>133996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18058</th>\n",
       "      <td>2021-08-10</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>6151956</td>\n",
       "      <td>6357833</td>\n",
       "      <td>134064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18094</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Maharashtra</td>\n",
       "      <td>6159676</td>\n",
       "      <td>6363442</td>\n",
       "      <td>134201</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>520 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            date        state    cured  confirmed  deaths\n",
       "76    2020-03-09  Maharashtra        0          2       0\n",
       "91    2020-03-10  Maharashtra        0          5       0\n",
       "97    2020-03-11  Maharashtra        0          2       0\n",
       "120   2020-03-12  Maharashtra        0         11       0\n",
       "133   2020-03-13  Maharashtra        0         14       0\n",
       "...          ...          ...      ...        ...     ...\n",
       "17950 2021-08-07  Maharashtra  6130137    6341759  133717\n",
       "17986 2021-08-08  Maharashtra  6139493    6347820  133845\n",
       "18022 2021-08-09  Maharashtra  6144388    6353328  133996\n",
       "18058 2021-08-10  Maharashtra  6151956    6357833  134064\n",
       "18094 2021-08-11  Maharashtra  6159676    6363442  134201\n",
       "\n",
       "[520 rows x 5 columns]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maha"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "ac0f643a-da50-4988-af76-d0cee96ad684",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[98], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mlineplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mconfirmed\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mmaha , hue\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.lineplot(x='date',y='confirmed', data=maha , hue='state')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "2a1eef29-62e9-4ca4-99d7-cd0f0af0de00",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[100], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mlineplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdeaths\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mmaha  )\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.lineplot(x='date',y='deaths', data=maha  )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "afbd4a6a-e62e-4fc6-8984-a62b1c64b4f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "delhi=df[df.state=='Delhi']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "6d4327a7-deeb-4823-a0ad-57c16524d554",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>cured</th>\n",
       "      <th>confirmed</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2020-03-02</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>2020-03-03</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>2020-03-04</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2020-03-05</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>2020-03-06</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17938</th>\n",
       "      <td>2021-08-07</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>1411042</td>\n",
       "      <td>1436623</td>\n",
       "      <td>25065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17974</th>\n",
       "      <td>2021-08-08</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>1411064</td>\n",
       "      <td>1436695</td>\n",
       "      <td>25066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18010</th>\n",
       "      <td>2021-08-09</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>1411159</td>\n",
       "      <td>1436761</td>\n",
       "      <td>25066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18046</th>\n",
       "      <td>2021-08-10</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>1411235</td>\n",
       "      <td>1436800</td>\n",
       "      <td>25067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18082</th>\n",
       "      <td>2021-08-11</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>1411280</td>\n",
       "      <td>1436852</td>\n",
       "      <td>25068</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>528 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            date  state    cured  confirmed  deaths\n",
       "34    2020-03-02  Delhi        0          1       0\n",
       "38    2020-03-03  Delhi        0          1       0\n",
       "42    2020-03-04  Delhi        0          1       0\n",
       "45    2020-03-05  Delhi        0          2       0\n",
       "51    2020-03-06  Delhi        0          3       0\n",
       "...          ...    ...      ...        ...     ...\n",
       "17938 2021-08-07  Delhi  1411042    1436623   25065\n",
       "17974 2021-08-08  Delhi  1411064    1436695   25066\n",
       "18010 2021-08-09  Delhi  1411159    1436761   25066\n",
       "18046 2021-08-10  Delhi  1411235    1436800   25067\n",
       "18082 2021-08-11  Delhi  1411280    1436852   25068\n",
       "\n",
       "[528 rows x 5 columns]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delhi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9311f612-51f1-4633-859c-ff92853e78af",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[61], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mlineplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mconfirmed\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mdelhi , hue\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.lineplot(x='date',y='confirmed', data=delhi , hue='state')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3c2d8aed-97c6-4865-aed4-78fb5ef2c25e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "D:\\Anaconda\\Lib\\site-packages\\seaborn\\_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[63], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(rc\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m15\u001b[39m,\u001b[38;5;241m10\u001b[39m)})\n\u001b[0;32m      2\u001b[0m sns\u001b[38;5;241m.\u001b[39mlineplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdate\u001b[39m\u001b[38;5;124m'\u001b[39m,y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdeaths\u001b[39m\u001b[38;5;124m'\u001b[39m, data\u001b[38;5;241m=\u001b[39mdelhi  )\n\u001b[1;32m----> 3\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(15,10)})\n",
    "sns.lineplot(x='date',y='deaths', data=delhi  )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "721e3a66-bee8-4e81-8b05-f90cc464a9f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "29489079-ddc4-46ca-abff-68a023797a11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting sklearn\n",
      "  Downloading sklearn-0.0.post12.tar.gz (2.6 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'error'\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  error: subprocess-exited-with-error\n",
      "  \n",
      "  python setup.py egg_info did not run successfully.\n",
      "  exit code: 1\n",
      "  \n",
      "  [15 lines of output]\n",
      "  The 'sklearn' PyPI package is deprecated, use 'scikit-learn'\n",
      "  rather than 'sklearn' for pip commands.\n",
      "  \n",
      "  Here is how to fix this error in the main use cases:\n",
      "  - use 'pip install scikit-learn' rather than 'pip install sklearn'\n",
      "  - replace 'sklearn' by 'scikit-learn' in your pip requirements files\n",
      "    (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)\n",
      "  - if the 'sklearn' package is used by one of your dependencies,\n",
      "    it would be great if you take some time to track which package uses\n",
      "    'sklearn' instead of 'scikit-learn' and report it to their issue tracker\n",
      "  - as a last resort, set the environment variable\n",
      "    SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error\n",
      "  \n",
      "  More information is available at\n",
      "  https://github.com/scikit-learn/sklearn-pypi-package\n",
      "  [end of output]\n",
      "  \n",
      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "error: metadata-generation-failed\n",
      "\n",
      "Encountered error while generating package metadata.\n",
      "\n",
      "See above for output.\n",
      "\n",
      "note: This is an issue with the package mentioned above, not pip.\n",
      "hint: See above for details.\n"
     ]
    }
   ],
   "source": [
    "pip install sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "2592f4c0-5826-442e-ad0c-693086e7de62",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "88c1e015-4f66-4804-a938-306df11a0e23",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# maharastra ==> top  (data analysisP) \n",
    "\n",
    "# predict ===> \n",
    "x=maha['date']    # independent veriable\n",
    "y=maha['confirmed']   #dependent "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "fc6bf7da-26c9-44a9-bfeb-50477738e9b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "b5fc0b82-4ca7-47b3-93c0-8230c408d352",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "d8854ad5-7a8b-4803-8c20-e047bfd69460",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr=LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "3e37742b-17e5-4fb7-862d-83e0d292b3a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7525    2020-10-20\n",
       "1175    2020-04-21\n",
       "18058   2021-08-10\n",
       "1921    2020-05-14\n",
       "1592    2020-05-04\n",
       "           ...    \n",
       "2255    2020-05-24\n",
       "4690    2020-07-31\n",
       "8645    2020-11-21\n",
       "17014   2021-07-12\n",
       "10102   2021-01-01\n",
       "Name: date, Length: 364, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "6de460e1-5b6b-4d01-8f4f-31aecd40fc98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7525     1601365\n",
       "1175        4669\n",
       "18058    6357833\n",
       "1921       25922\n",
       "1592       12974\n",
       "          ...   \n",
       "2255       47190\n",
       "4690      411798\n",
       "8645     1768695\n",
       "17014    6157799\n",
       "10102    1932112\n",
       "Name: confirmed, Length: 364, dtype: int64"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "db7603da-a1ca-4a61-a43f-3743f94cd4b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(np.array(x_train).reshape(-1,1),np.array(x_train).reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66329d9a-2aa2-469a-85fd-a85ec147c2bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "LinearRegression(copy_X=True,fit_intercept=True, n_jobs=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43272731-f217-40bc-b057-124bcd7fb8dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr.predict(np.array([[2020-7-19]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72962a95-991e-4f71-8c4c-b5373d277690",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}